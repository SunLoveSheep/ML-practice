#suppose mtcars is a dataframe that contains information about different car prototypes
#dataframe is consist of columns as data types and rows as observation values
#to check the first observations and last observations:
head(mtcars)
tail(mtcars)

#check the dataframe structures: (this will display how many objectives and variables in the dataframe as well as their detailed values
str(mtcars)

#create a new data frame: (vectors should be the same length, but can be with different variable type)
planets <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune");
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883); 
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67);
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE);
# Create the data frame:
planets_df  <- data.frame(planets, type, diameter, rotation, rings)

#select data from a dataframe by variable name:
furthest_planets_diameter <- planets_df[3:8,"diameter"]

#an easier way to select a whole column/row, making use of the '$' sign. R will only look up for variables with name after '$'.
rings_vector <- planets_df$rings

#select certain columns/rows according to some criterion:
planets_with_rings_df <- planets_df[rings_vector,] #select all planet_df data with rows that have ring=TRUE
#a more elegant way, using the subset() function
#subset(dataframe, subset = condition)
small_planets_df  <- subset(planets_df, subset = diameter<1)

#order things up:
vector = c(1,2,3,4,13,12,10,8)
order(vector) #will output 1,2,3,4,8,7,6,5, as the order of their largeness
vector[order(vector)] #will output 1,2,3,5,8,10,12,13 ###Important, back into an ordered sequence. Since vector[] will output 
#as the order given inside the [] where an sorted sequence if provided.

#some sorting (ordering) and selecting job on planets_df:
#first, sort the planets based on their diameters in a decreasing manner
positions <- order(planets_df$diameter, decreasing = TRUE)
#then select data from planets_df based on sorted "position" column and entire rows:
largest_first_df <- planets_df[positions,]

