import numpy
import pandas

#calculating cost function under current predictions: theta
def compute_cost(features, values, theta):
    """
    Compute the cost of a list of parameters, theta, given a list of features 
    (input data points) and values (output data points).
    """
    m = len(values)
    sum_of_square_errors = numpy.square(numpy.dot(features, theta) - values).sum()
    cost = sum_of_square_errors / (2*m)

    return cost

#Conducting gradient descent to iteratively lessen the differences between training values and linear model predictions
def gradient_descent(features, values, theta, alpha, num_iterations):
    """
    Perform gradient descent given a data set with an arbitrary number of features.
    """

    # Write code here that performs num_iterations updates to the elements of theta.
    # times. Every time you compute the cost for a given list of thetas, append it 
    # to cost_history.
    # See the Instructor notes for hints. 
    m=len(values);
    cost_history = []
    print values
    ###########################
    ### YOUR CODE GOES HERE ###
    i=0;
    while (i<num_iterations):
        predict = numpy.dot(features, theta)
        theta = theta - (alpha/m) * numpy.dot((predict-values),features)
        cost_history.append(compute_cost(features, values, theta));
        #theta = theta + [1,1,1]
        i=i+1
    ###########################

    return theta, pandas.Series(cost_history) # leave this line for the grader

#calculating the coefficients of determinations of the prediction results
def compute_r_squared(data, predictions):
    # Write a function that, given two input numpy arrays, 'data', and 'predictions,'
    # returns the coefficient of determination, R^2, for the model that produced 
    # predictions.
    # 
    # Numpy has a couple of functions -- np.mean() and np.sum() --
    # that you might find useful, but you don't have to use them.
    
    # YOUR CODE GOES HERE
    r_squared = 1 - numpy.sum((data-predictions)*(data-predictions))/numpy.sum((data-numpy.mean(data))*(data-numpy.mean(data)))

    return r_squared
